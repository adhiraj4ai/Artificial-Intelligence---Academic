{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMADjOuBpPbEU+gNp1izb6i"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":5,"metadata":{"id":"VgHlzw8ndtJX","executionInfo":{"status":"ok","timestamp":1662088137111,"user_tz":-345,"elapsed":412,"user":{"displayName":"Rajan Adhikari","userId":"08655444637424927407"}}},"outputs":[],"source":["from queue import PriorityQueue"]},{"cell_type":"code","source":["def best_first_search(start, goal, n):\n","    visited = [False] * n\n","    pq = PriorityQueue()\n","    pq.put((0, start))\n","    visited[start] = True\n","     \n","    while pq.empty() == False:\n","        node = pq.get()[1]\n","        \n","        # print the path having lowest cost\n","        print(\"Node {0} has been visited.\".format(node))\n","        if node == goal:\n","            break\n"," \n","        for node, heuristic in graph[node]:\n","            if visited[node] == False:\n","                visited[node] = True\n","                pq.put((heuristic, node))\n","    print()\n","\n","def addedge(x, y, heuristic):\n","    graph[x].append((y, heuristic))\n","    graph[y].append((x, heuristic))"],"metadata":{"id":"-z8ZHCKyd_Eg","executionInfo":{"status":"ok","timestamp":1662088174844,"user_tz":-345,"elapsed":1,"user":{"displayName":"Rajan Adhikari","userId":"08655444637424927407"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["# number of nodes\n","n = 9\n","\n","# create nodes in the graph\n","graph = [[] for i in range(n)]\n","\n","# Add edges along with heuristic in the graph\n","addedge(0, 1, 3)\n","addedge(0, 2, 8)\n","addedge(0, 3, 7)\n","addedge(1, 4, 9)\n","addedge(1, 5, 8)\n","addedge(2, 6, 12)\n","addedge(2, 7, 14)\n","addedge(3, 8, 7)"],"metadata":{"id":"fVtkQnFBe6bB","executionInfo":{"status":"ok","timestamp":1662088176403,"user_tz":-345,"elapsed":2,"user":{"displayName":"Rajan Adhikari","userId":"08655444637424927407"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["source = 0\n","target = 9\n","best_first_search(source, target, n)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YiqRSEYrei68","executionInfo":{"status":"ok","timestamp":1662088176868,"user_tz":-345,"elapsed":2,"user":{"displayName":"Rajan Adhikari","userId":"08655444637424927407"}},"outputId":"e295b2ea-df5b-45d2-babc-35d2fa51964d"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Node 0 has been visited.\n","Node 1 has been visited.\n","Node 3 has been visited.\n","Node 8 has been visited.\n","Node 2 has been visited.\n","Node 5 has been visited.\n","Node 4 has been visited.\n","Node 6 has been visited.\n","Node 7 has been visited.\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"O7AnTRevekFr"},"execution_count":null,"outputs":[]}]}